django-autocomplete-light experimental tutorial
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Welcome to secret django-autocomplete-light experiment!

.. image:: experienced.png
  :height: 300
  :align: center

- No? go ahead with the :ref:`select2 tutorial<select2-tutorial>`, it's a safe
  choice because it's maintained by a huge community and has all the features
- **Yes!!** read on to build the future together, we don't have much features
  yet over here, because we need time to curate them and stabilize an API, but
  we fix a lot of issues that won't be resolvable with select2.

Differences with select2
========================

This relies on the `autocomplete-light`_ Web Component that is heavily inspired
from the autocomplete script of the early versions of
django-autocomplete-light, which was designed from the ground up for Django
itself:

- delegates suggestion box rendering to the server, allowing templates for
  example
- rich rendering of options both in the widget and the autocomplete box
- no javascript dependency: no conflict with anything!
- extends HTMLElement: no need to bother with the element lifecycle because
  it's handled by the browser!
- material design by default, looks great everywhere
- also works to create non-form fields such as global navigation bars like in
  facebook header

The :ref:`test_project<demo-install>` already includes some examples, to try
out `autocomplete-light`_ itself you just have to clone its repo and run
``python serve.py``.

QuickStart
==========

.. warning:: The next two examples publish your models to unauthenticated
             users, make sure to read the third example before closing this
             page or kitten will die somewhere!!!

Model field autocompletes
-------------------------

- Example source code: `test_project/alight_modelform
  <https://github.com/yourlabs/django-autocomplete-light/tree/master/test_project/alight_modelform>`_
- Live demo: `/admin/alight_modelform
  <http://localhost:8000/admin/alight_modelform/tmodel/add/>`_

Enable an autocomplete formfield for a Foreign Key field as such:

.. code-block:: py

    from dal import autocomplete

    autocomplete.formfield(
        YourModel.your_fk,
        queryset=OtherModel.objects.all(),
    )

This method applies an autocomplete form field for all forms rendering this
field.

That also means that you need to include the URLs
generated by ``autocomplete.formfield()`` calls, this is the easiest way:

.. code-block:: py

    urlpatterns += [path('autocomplete/', include('dal_alight.urls'))]

Form field autocompletes
------------------------

Autocomplete fields may also be declared in Forms or ModelForms:

.. code-block:: py

    class YourModelForm(forms.Form):
        your_fk = autocomplete.ModelAlight(queryset=OtherModel.objects.all())

If you are manually declaring fields in form classes then you will also need to
include the urls for every form that you want to use:

.. code-block:: py

    urlpatterns += autocomplete.urls(YourModelForm)

Security
--------

DAL v4 fields are coupled with their view, and when they are copied by Django
form constructor they will get the request object from threadlocals,
instanciate the view and call the new ``secure_queryset(user, qs)`` method from
the view. As such, you can implement your security inside secure_queryset which
you may define by implementing the method or on the fly:

.. code-block:: py

    autocomplete.formfield(
        YourModel.your_fk,
        queryset=OtherModel.objects.all(),
        view=autocomplete.AutocompleteView.clone(
            secure_queryset=lambda req, qs: qs.filter(owner=req.user),
        )
    )

.. note:: secure_queryset() will be called both by the widget and by the view
          prior to sorting results.

Rendering
---------

DAL v4 fields are coupled with their view,
To customize option rendering, at this point, you can override the
``render_choice`` method the view:

.. code-block:: py

    class YourForm(forms.Form):
        test = YourModelField(
            queryset=YourModel.objects.all(),
            view=autocomplete.AutocompleteView.clone(
                render_choice=lambda c: f'<div data-value="{c.pk}">{c}</div>'
            ),
        )

Choices will be rendered as specified in this function, both in autocomplete
box suggestions and on initial form rendering.

Subclassing
-----------

You may also subclass instead of using ``AutocompleteView.clone()``:

.. code-block:: py

    class YourView(autocomplete.AutocompleteView):
        def secure_queryset(self, request, qs):
            return qs.filter(owner=request.user)

        def render_choice(self, choice):
            return f'<div data-value="{choice.pk}">{choice}</div>'

Then just pass ``YourView`` to the ``view`` keyword argument of the
autocomplete fields.

.. _autocomplete-light: https://yourlabs.io/oss/autocomplete-light
